# Common Payments SDK Walkthrough

• **SDK Overview & Integration**: Explains Juspay's Software Development Kit that sits within merchant apps, enabling faster go-to-market (as fast as 1-2 days) through simplified integration with just two interface calls, while providing cross-platform support for Android, iOS, web, and various frameworks.

• **Configurability & Customization**: Details the extensive customization capabilities through Juspay Studio, a no-code platform where merchants can fully customize payment pages to blend seamlessly with their app design, configure payment methods, offers, and business logic without requiring developer bandwidth.

• **Advanced Features & Management**: Covers sophisticated features including OTA (Over-The-Air) updates, A/B testing with 50+ metrics monitoring, merchant-specific releases, payment method filtering, auto OTP reading, real-time analytics dashboard with conversion funnel analysis, and accessibility compliance for disabled users.


Transcript:

[00:00:00] I guess prion could have gone through the complete backend of what juspay does and like the how the orchestration product as a whole works. We'll probably go over like what's there in the front end part of it as well. So the idea is that now just based backend, which connects with a lot of aggregators, pgs, and all is exposed as a SaaS product through which you can actually connect from your merchant site.
[00:00:24] So if you think of merchant here connecting to just pay, you could either have. A p integrations or you could have SDK integrations. Now, uh, this part will probably focus on the SDK part of the integrations. So, SDK is basically a software development kit that you can just give out to the merchant, and the merchant just puts it in their app and it runs as part of the app.
[00:00:47] Now say for example, if I have to reuse the same image now rather than this, if you consider this is a merchant, a food delivery merchant. And they have apps all over and all their devices and stuff. What I'm saying is that we could give in small SDK that sits as part of their app. So we actually are present in a lot of this merchant apps, like in India.
[00:01:10] We have a lot of merchants across and we have this, our SDK sitting there now rather than the merchant actually now connecting, doing all this a p integrations by themselves from their backend and stuff. SDK is going to have inbuilt connections that connect with our backend. So merchant just has to invoke our SDK, and then all the work is taken over by us.
[00:01:34] The primary advantage that we see within SDK or AP integration is faster go to market. So you can actually. Go live and ask like, uh, fast as a day or two. Our idea was that, uh, we had like some of our programs here that for startup who have high intent, like who have developers ready, you can't even go live in a day levels now, uh, probably we'll go into what the SDK does in deep in later, but the idea is that we give out an SDK, the SDK sits as part of the merchant's app, and then it does all the work that the merchant had to do.
[00:02:09] So we are sort of going a bit more vertical into the Merchants payments page saying that I'll not only take care of your backend for payments, let me integrate further. Let me also take care of your payment page, the UI aspect of it in your app so that you can completely forget that you have to put in any developers for your payments.
[00:02:30] We'll take care of like everything after your card page till it comes back on the order confirmation page. You just need to have a card. Cart page where you actually confirm your final orders and stuff and then you click have a order confirmation page. Within this, I'll take care of everything. So with this, we are sort of saying that all you need is some, maybe a product manager or a business analyst who can just go over the numbers to see if everything is happening fine.
[00:02:57] So this is more of a vertical integration on oiler, whatever, like our backend we call it as oiler. So whatever we have on top of that, it's tightly linked to that. Our product is always going to talk with. Or just pay. So if you can consider, this is just pay backend. This is oiler. Then we have integrations from SDK to oiler to do every work.
[00:03:17] Like if you want to get the list of safeguards, if you want to do a transaction, if you want to do like a, maybe like verify if a specific card has offered suppli to everything can be achieved via the SD itself. Right now there are three or four different, uh, like majorly, two different variants of how the SDK is integrated with the merchant.
[00:03:37] So one is the payment page where we completely own their payment page experience. Like we show the list of instruments we show, like when the button is, like how that page should look like and everything. Second is where the merchant says, let me control the UI aspect of it. You just make the a p calls alone to the backend.
[00:03:55] So these are the two different variations. The one that you're seeing there is the payment page variant, which is why we are saying that it's like a very fast way of integrations where the merchant just has to do like two interface calls. They just have to do two interface calls on their, uh, app site.
[00:04:11] So a development developer effort is very minimal. All you have to do is just inter integrate on those two interface calls, and then we will take care of everything. Most of them is like plug and play types. So that's the idea of SDK. So if I have to go a bit into S-D-K-S-D-K, if you can consider is more like, so if you consider this as an SDK, you have like a native component and some Java script.
[00:04:40] So basically these are like languages, which is not very necessary. But the idea is that this part of it has like the you instead of JavaScript, you can sort of say this is the business logic aspect of it. You have business logic.
[00:04:57] No, because your SDK is gonna sit in your phone, there has to be some integrations or uh, instructions that have to be given to Android, Android, iOS. So that part is completely taken care by here, which is a very lightweight component. Uh, things small as like 300 to 400 kb. Then you have business logic sitting on top of it.
[00:05:16] Now, the way we've done this is in a way that you have a single code base that is able to cater for maybe 300, 400 merchants across or more. 10,000 merchants also will be able to cater. Now the primary. Differentiation, at least we're giving in India is that, uh, configurability. So say there are a lot of aggregators, pgs also giving out payment pages saying that you just come integrate with us, we'll give you payment page.
[00:05:47] But their configurability is at a level of changing color, putting a logo and stuff. But what we are saying is we are able to completely blend your payment page with your app. So. When a merchant sort of moves through this, we are sort of saying that they'll be able to completely not even see a difference.
[00:06:05] Like a user would not actually see any difference between that and this. So it looks like they are completely as part of their own up. Uh, you can even check out some things like big basket zep, like some of our India merchants, uh, in Southeast Asia. HSBC has taken us. So the HSBC payment page is sort of fully customized.
[00:06:25] We are able to achieve that through. A single code, but a merchant specific. Every merchant or every client that we bring has some configs, which define, what is your primary color, what font should you use, what is your padding, everything. So almost all of this is configurable through a product called Just Pay Studio.
[00:06:42] Which is also exposed to merchants as well as handled internally. If a merchant is very hands-on, they can go there, build their own payment page from scratch through a Figma, because we are able to do that. Now, if the merchant is saying, no, I don't have time. I'll give you the Figma, you do it for us. That is also possible.
[00:06:58] But we are trying to push, make it more configurable or make it more easier so that merchant is able to, merchant's design team is able to do that by the Figma. So the idea of this overall is to simplify integrations for the merchant, make them sort of like easy to onboard and go faster on like the the Go live strategies and all that.
[00:07:21] Other advantage that we have is, this is. Uh, powerful thing that is. Uh, so with a single code base, we are able to achieve any change that you make. We are able to achieve cross, cross platform changes. Also, like we are able to make, say for example, if a new feature comes up on live, we make one change in our code, but.
[00:07:42] With our framework that we have already done, we are able to deploy it in both Android, iOS, or on web as well as like every other platform on Earth React Native Cord or flatt, all this like heavily used frameworks. We have like integrations. We will be able to like any merchants on like some random things.
[00:08:01] Also, we are able to integrate, so RSDK one is cross platform support is also there as well as like support for multifunctional frameworks. Like all of these are also there. Uh, any questions so far? Like, cool. Uh, so here, if I have to go deeper into this, we have like a lot of features. Also some of this are sort of, uh, explained there.
[00:08:27] So from a pr uh, conversion perspective and stuff, this experience is something that we are saying list because it's gonna be completely blended. With the user app, we are able to have a good experience. Faster GTM like we discussed, because it's a couple of integrations, like two interface calls, we are able to go live faster.
[00:08:46] Uh, conversion SR uplift, we are sort of saying because we have a lot of extra, um, validations that we do on the payment page front. Say for example, you decide that you don't want to allow international cards on this payment page on, on this payment flow. You can control that once you type like your eight digits or nine digits.
[00:09:05] We'll make a backend call. We'll be able to control saying this is not a load for this flow. So we'll be able to restrict a lot of things upfront so you fail fast for the user. So the user doesn't have to go all the way to the bank page to decide, okay. They didn't know all that sort of stuff. Uh, specifically, maybe in India you have a stuff like UPIV, sort of that account identifier will be able to give.
[00:09:28] We know that okay, it's being paid for this person. So those sort of things. Also, we have, uh. So the SDK, the lightweight SDK is this native part that we were talking about. Um, so this, as some of the examples from our India, uh, merchants were. Pre-payment page and post-payment page, these guys have been able to see such a big benefit.
[00:09:50] Uh, one other big thing that we have is around like usage of safeguards. So we'll be listing the safeguards that the user had on that specific platform. So that is also one big improvement that we have. And we have like a lot of variance on how the payment page can be like, it can be completely like when you click on proceed to page, it can open up a full page or we have a variant where like the last used option or some promoter option comes up front.
[00:10:15] Or you have like, you already have that selected, maybe you just swipe. So we can have like places where you reduce the number of flicks. Also there are different variants. Some like depends on depending on the merchant's, uh, interests. And depending on the merchants sort of ask, we can sort of decide on which flow has to be given.
[00:10:32] Car can be given, they can even switch between these two to decide where they want to go. All that sort of stuff. Um, yeah. Oh wow. Different document methods to show up for different, right? Yeah. Everything is available so you can, so this can be configured from our dashboard. So say for example, some merchant don't all allow cards at all.
[00:10:57] So in that case, cards will not be shown. We take the input from the dashboard. Now the dashboard since my back, say for example, merchant A, B, C doesn't want cards at all. We take the input from dashboard, the merchant, the dashboard responds back with don't do A, B, C, then we don't show that at all. So we probably themselves on, yeah, merchant comes to the dashboard, says disabled cards completely.
[00:11:19] So maybe some merchant might decide that they do not want Apple Pay wallet at all. So when you say you own Apple, pay for some, um, buy from certain entry, all that. Make sure that SAP fraud, so there are like a couple of, uh, variations again here. Do you not want it to, for a complete, like your a hundred percent audience, you can go switch it off from dashboard.
[00:11:45] Then you have, we have some fill, uh, feature, which is called payment locking, which says that specific for this order, I don't want them to use Apple Pay so I can exclude Apple Pay from the list of available payment methods. So we have like minimal features that say, I don't want this, I don't want that, I only want this, only want that.
[00:12:05] So we are allowing, uh, all these configurations to happen on our payment page. The downside of which they have to build, if they're doing their own ui. So either the logic has to reset or their end. I'm saying, I'm gonna take away that difficulty. Just send me this parameter which says, do not allow Apple pay for this order.
[00:12:25] So they have some identifier which says, okay, this order originated from this region and this order in this region. I don't wanna allow Apple Pay. So I'll just say that they'll just send me a, in, uh, input saying, so we get, like I was mentioning, there's two interface calls. One is called Initiate, the other is called the process call.
[00:12:41] The Process call. We take some inputs and one of this input is allowed stuff so I can sort of block some payment methods there or allow only specific payment methods there. And, uh. Offers also are available as part of this. So, uh, you can configure offers in our dashboard backend. They can sort of then, uh, decide that this offer is gonna be applied to a specific payment instrument or specific payment method.
[00:13:05] So in that case, we'll be showing the list of offers as well as when you type in your card number and stuff, we'll be showing card is eligible for offer or card is not eligible for offer. Uh, same cases like for recurring payments, everything can be controlled from this. Now, if you want to, uh, only make a user go through a recurring payment flow, we can sort of decide if the user's card is available for recurring payments and all that sort of stuff.
[00:13:32] So from a tech architecture perspective, maybe to give a very high view, this business logic is also. Like constructed in a way. It's like called, we call it microservices. Now. You have a like maybe three or four micro at an order level for a customer all, um, like we are able to achieve that through some parameters they send to us.
[00:13:53] So they have to configure it in a way that they send the parameters to us. And both that we will be able to handle everything. Like if the offer is applied, only show something. All those things are able to be. Like configured on our right, you can like rearrange everything is possible. If I, if you check out the space studio, you can sort of completely rearrange, always put cards up top.
[00:14:13] Maybe you wanna experiment, try putting some other Apple pay up top. You can put apple pay up top. So all this is available to us really, and all of this are. Uh, basically zero code development, no code, low code, like a pure platform where someone with zero tech expertise can come just drag around, move around stuff and just see whatever they want.
[00:14:31] Now we are building studio like studios already there, but we are sort of improving it more where, uh, merchant design team, right, who's actually designing it in Figma can come and design it here and that can get converted into a payment page itself. So that is the level that we are trying to, so that it's like.
[00:14:50] Completely DIY, like do it yourself for the merchant there we are not like we are giving you full control. You can go play around with whatever you want. You don't have to allocate developer bandwidth or like a engineering manager and all this as a complete project. We'll do everything for you because we have built the framework.
[00:15:06] We just need some confis, which get merged with the code and gives you a different flavor of the payment page. You change something, a different flavor of the payment page comes up. So all this is achievable through our code.
[00:15:19] Oh, when did you go that big off? Yeah,
[00:15:29] Joe,
[00:15:36] where? Uh,
[00:15:40] so the, like, these are some of the ways where we are able to achieve that. So, so this may not be applicable outside India. Uh, UPA related stuff. Now, wallets, we have integrations where we are able to say that, say for example, you've done something for a hundred dollars and you have wallet balance is only $50.
[00:16:04] We can sort of grade outputs because you do not have enough wallet balance to pay or you have to go load there, the wallet and come back. So this again, wallet again, eligibility is something maybe for a prepaid wallet you'll be eligible, but for a postpaid wallet possibly you might have to do some KYC and you're not eligible.
[00:16:22] But on the partnership side, we also have merchants asking us to promote their wallet. So we'll just say that. This wallet is eligible, like available as a product, but maybe you're not eligible to pay for that. It, so it'll show it as a grade out option. So all that sort of things are available to us. Um, gateway support based filtering.
[00:16:44] So it is coming back to where you are, like, say maybe through Stripe you had some things and you want to force this order through Stripe. But on Stripe maybe you don't have a couple of payment methods. Only through add in you have so that payment locking is available. Where they can leverage it for a variety of different possible options.
[00:17:03] One, like how you said, amount based filtering, offer based filtering and all that as well. Uh, most of these are sort of like, like card validations and all we, uh, discussed. So this is something that is very, something that is a differentiator again, because. Even though this is a SaaS product and SaaS products, say for example, Gmail is a SaaS product where you get an update, everyone gets an update.
[00:17:32] It's not like you will get a different update. I get a different update, everyone gets an update. Now we have done it in a way where we are able to release it specific to a merchant. So our code could change for every merchant, but not every merchant has to get that at the same time. So we push out a new version of our code.
[00:17:53] It's more of a pool base. We've given this control to the merchant side with access on our side. Also, if there is a urgent fix that we have to roll out, we'll do, but we still give it out to the merchant saying that you still have access if you want to take this new feature or if you want to stay like how production is today.
[00:18:11] This is purely frontend backend. It's still a SaaS product where a change happens. It impacts all merchants, but a front end change, we are saying I'll be scoping it only to you. I will not, I'll make sure that if I do a release for Merchant Day, merchant B is definitely not affected. And I have the flexibility where a merchant can come and say, I wanna do a release.
[00:18:29] No, I don't wanna do a release. No. And all of these releases go through something called the AB monitoring system. We have like 50 plus metrics that we monitor. Success rates, is the payment page opening in time? What is the latency? How many like is our backend a PA successfully happening? There are a lot of things that we check on, and only if all this are better or at least comparable to your previous versions that are in production.
[00:18:54] Would you be able to go up, say you, you have version A that is running in production, you are releasing a new version, version B now is version B doing. At least equal to version A. That's when I'll be like increasing the stagger or I'll be auto aborting the system completely. So all the systems are sort of inbuilt.
[00:19:11] So the idea is that you can't, uh, like production can break only if there are like two or three change. Like one is change, possibly there is capacity. If you're running out of capacity, you can, it can break. But because SDK sitting in your phone, most phones have unlimited capacity always. So that cannot happen.
[00:19:32] Change is only the possible, so we are controlling that change through this AB monitoring system. So this is one another differentiator where merchants get to decide when they want to release a new feature, how they want to release a new feature. They can decide that I want to keep this new version live for 10% for maybe two days.
[00:19:50] They wanna experiment, is this doing well? Maybe including our metrics. They also have some metrics at their set, and only if it's good do they want to stagger up. So all that is available to us. All that systems are already inbuilt.
[00:20:08] Yeah, these are again, uh, agility. One big thing is, maybe I should have talked about in there, OT updates. So basically, uh, all merchants frontend releases, like a majority of them are doing it through app updates. So you would be actually getting more app updates every time you open the app and stuff, right?
[00:20:31] So what we are saying is we are sitting in your app, inside your app, but any changes that we do, 90% of the changes that we do, we don't expect you to do an app update. We'll be able to over there, push all these changes. So OT updates is one big, uh, advantage that as an SDK we are able to give. So any change, say for example, you want to enable, uh.
[00:20:56] Visa pass Key flow or a MasterCard pass key flow, a new method of authentication that has come 90% of business logic related changes. Merchant doesn't even have to do anything, not even a minor version update on any anything on their site. We'll be able to push it over there. So next time when you open the app, I'll automatically download the latest bundle or latest code and start running that.
[00:21:19] Very few changes is when we ask the merchant. So in that part, when you see there is like native as well as the business logic part of it, like native is a very light feature and very rarely do we change that. Only when you change that do we ask for an app update. Otherwise everything is going to go over there.
[00:21:35] The complete business logic part of them is actually pushed over there. So this way we are able to roll out our any changes that the merchant wants faster, any new feature that they want can be rolled out faster. So. That is one big advantage. All of this we talked about, like we have like studio to monitor configs or like to change configs.
[00:21:56] You can run experiments to decide, okay, is this, maybe cards on top is better or maybe wallets on top is better. All this can be, uh, sort of experimented with, uh, mostly quicker integration. Also, we talked,
[00:22:15] yeah. Can I ask from a user experience, uh, point of view from when we are making a payment right, to where the payment is successful, what's the average time data? Um, depends on instruments. Say for example, in wallets where you already. Link your wallet and stuff. It's just a one click. Maybe it's done in less than a second or two, so you just have to send saying that maybe you have a hundred dollars, deduct $50 from this person's account.
[00:22:44] Done. In case of card transaction, it's usually a bit higher because you're asked for an additional factor of authentication, but. Majority cases. We try to close that in like five to ten second range, including because that additional factor authentication. Also, we have this auto OTP reading. So you as a user, when you go to and land on the bank page where the OTP is being asked to be fed in, we read the messages that come into your phone and we are able to pass the OTP and submit it automatically.
[00:23:13] So purely from a number of clicks perspective, we are saying your proceed to pay, you should be done. You should not be actually expected to do one more or two more clicks and all that, we will be able to automatically do the complete thing after that. So from a merchant perspective, when we are talking to them, they'll ask, uh, because orchestration is rather be a task, the user, uh, the financial instant versus does it add on to latent COI processing time.
[00:23:44] It, uh, theoretically whatever they're asking is fair. Basically one more layer is going to add for a bit of latency, but we are quite fast that we do not actually have any impact that merchants are able to accessibility, discern maybe in MS that levels, but, uh, as an extra layer, we don't. Consume too much.
[00:24:07] It's never gone beyond like a second, two second type. So it's been quite fast. We get it. We are just a translator. We decide on the gateway. We just decide and so, so yeah. Awesome. So all of this are achievable through Confis itself from the studio itself. Say for example, all this passenger details. Like the breakdown of what the fair is.
[00:24:28] Everything was achievable through configs, no code. So code has already written, but all of this, we were able to get it from the merchant and we were able to show all this. So this is some of, like, this is one of the most configured, like, like, uh, configuration heavy payment, which it's fused in one of our, uh, airways, uh, airlines.
[00:24:48] So this is one example where that complete breakdown, we were able, we were able to achieve through just confi. So our, we have pushed configs to a, a great extent so that merchants just come to our studio, configure everything that they want, go like, like they're. Page has to look exactly like their app.
[00:25:09] That should be achievable through no change in our code is the idea. Everything has to be achievable through studio, no code platform. Someone comes there, they're able to set the hexa value of their color padding everything. Everything should be automatically done. Maybe create a new component, everything like this sidebar component, which actually set that you have a breakdown of your ticket value.
[00:25:30] Everything should be configurable. So that's the idea we've been able to achieve. Whenever we do a change, like a new common comes, it should, it'll be fast anyway from our side, because we are not building a specific code base for a specific merchant. We are having a common layer and using ConX, we are able to achieve all this customizations.
[00:25:51] If we have the time we can. We have some version of just the studio that we can play. Yeah, but that's not the. That, uh, is being improved. That is like what we expose to the merchants today. No, I mean like you can show them Okay. Right now how these Yeah, if you're good. Yeah. Other thing is like we have this insights on what the merchant can see, so on the complete That's correct.
[00:26:22] Yeah. This is merchant dashboard again. So in this case, we are able to see like how many people landed on the.
[00:26:31] So if you see, we are able to say how many people landed on the payment page for how many people the payment option was selected. Like how many people just opened the payment page, did nothing. So you can see that there was like a good 20% drop here. People just told open the payment page, but didn't even select an option.
[00:26:47] So this from this analytics, from this funnel, maybe merchants can still look at, okay, maybe. Much like users are expecting some other payment option. So this is something that is also exposed to merchants. We are sort of giving like a funnel breakdown and where people, where they can go and see where people are dropping off, where people are sort of like where they can improve on all that stuff.
[00:27:08] The notification? Yeah. Yeah. We have, so we have something called click stream events. So basically the user is notified payment page open, just click that click. So we have like, they can configure events, uh, and those can be sent back to them. Merchant app, they have to handle it so they can send it back to their analytics system and build a dashboard of their own.
[00:27:30] Also, if they don't want to rely on us, they can build a dashboard of their own. We will send back events. Okay. Yeah. We should be, maybe some of them are not readily available on dashboards, but we have enough data to. Get those data per region, as long as we get those inputs from the merchant. The idea is that we would not be able to identify if merchant has some identifier for, say, Singapore versus India versus Indonesia.
[00:27:53] So as long as they're able to send us some identifier, we will be able to get all those data out by regions and stuff. Yeah. That will be customized. Yeah. Okay. Okay. Thank you. We can get that built. Also, like if you have a requirement, we can raise it. Our dashboard team, if something is new, if not available already, we can look at our dashboard also.
[00:28:13] Yeah. So, and that will, uh, end during retry. It'll take time because you already gone through a complete flow. Now you are decided, okay, this guy is not doing well. Let me try via gateway B, gateway A, you know, it's a known error you're trying via gateway B, but because these are all server to server calls, it's actually quite fast.
[00:28:32] So the compute time, like if you see this layer as in the center, you have two layers, and this layer is the center layer. And there are like five layers, like five systems on here because say just space here, you would have like say stripe, uh, gateway one, gateway two, and get in. So you integrations with everyone.
[00:28:55] Now. Maybe you went this route and you came back, decided, okay, this guy is not giving me, has given me a known error, so I'll, let me write, try to gateway too. So this will take time, but this is an additional feature which even if the merchant does, will take time. Because if the merchant says, okay, gateway one is not like routing properly.
[00:29:16] Or if, say for example. Uh, it's giving me a known error. Let me try to, gateway to merchant also has to start that or reroute their transactions to gateway to, but, uh, that compute and all is spread faster. So we don't take a lot of time to decide where to get because we have all those scores ready. Those scores are running parallelly.
[00:29:37] Maybe Prashant would've taken about that gateway scoring. How we are able to decide which is the best gateway and all that. So we know where should I go immediately. It's not computed at that time. We know just by referring to, so we know which is actually to be done. So that latency, again, is going to be in like possibly a mess, which no one is going to even like, uh, discern out.
[00:29:58] So, uh, another question I didn't anyone to, right? So merchant had decide like, okay, I was have, uh, three retries to gateway one first, and then like if these three, right, can I go to gateway two? Okay. But gateway two, can I do like two retries? And it really, okay, I go to the third one is that, uh, uh, is not possible that a lot of gateway now at the same time, but that, is there a, that the merchants can, you know, that kind of routeing.
[00:30:25] Merchants can configure, not retry routing, but merchants can configure, uh, what percentage of traffic has to go forward. Maybe we just decide based on how good this numbers are at that time, maybe at a moment of time, over a day, we can take calculations to decide which gateway's doing better. But merchants are not necessarily, uh.
[00:30:47] Giving the most importance to success. Probably they have like good commercials with some gateway where they want a lot of transactions to go. So there they can go, come here on our dashboard and define 80% of the transactions always go here. The rest 20% may be split around. Yeah, so that they wanna just experiment with the three gateways.
[00:31:05] They just give a very small, maybe a 5%, 10% traffic there and decide if this guy is good, doing good. If this new gateway that I've added is that gateway doing good? If it's doing good, probably they could go back to that gateway, maybe ask for a better commercials and come back and let us do so we allow them to, so the first priority given to them.
[00:31:24] If you come and decide, if you come to our dashboard and say that 80% I always want here, then I will always send 80% of your traffic there. The rest 20% is where I can play with. So this option also we've given there and we, yeah, we have that right of, so this was one.
[00:31:48] Okay, so this is just page studio. So in this case you can sort of like change font size, color, everything. Uh, other big thing is that our page, at least, it's completely accessible. So we've sort of made it, uh, access, it's not certified at HSBC. Steam is sort of. Taken this, and I shared it with some third party validation team who sort of making all the test cases to decide if our page is completely accessible according.
[00:32:22] So there's no standards that are defined, but they have some internal standards that they Well, and to, so in this case, is it like. It should be accessible for any disabled person, color, disabled, carin, or fully blind person. Everything is sort of has to be done. So maybe even if it's not available immediately, but yeah, it'll be available in the next two, three months because HSBC has this as a blocker in this.
[00:32:46] So this accessibility is one thing. Yeah.
[00:32:56] Feature ways probably will have someone else. Come up with like what are the different possible features that we have? Like say for example, part payments is one feature where you can pay 50% of yours through your wallet. That is 50% alone you pay through your card. So those sort of features, maybe a deep dine of the deep dive of those features maybe can have some time later.
[00:33:18] Sure.
[00:33:29] Yeah, so reward side is like maybe you have integrations with say, a Marriott system or like a, so they have their own rewards. So we have options to integrate with their rewards. To sort of say that if you wanna book a flight for, say, if the flight is like, say $2,000 or something and you want to use your reward points, we give that option to convert that reward points.
[00:33:51] As well. We have like, we can integrate, it's not available with every system, but we can integrate. If a merchant, if a big merchant comes and says, I have a big reward system and I want to let users allow to convert this at a specific level. They cannot con, they can configure all the rules. Everything is possible.
[00:34:06] I. But it's like it'll be taken up on demand whenever, uh, such a merchant comes. We don't have it live with every, say we don't have it with maybe Marriott Rewards. We might not have it, but if Marriott comes and says, I wanna build a system with you, we'll be able to, but our front end, at least payment paid side, we have all flexibilities to allow that.
[00:34:23] Say, I wanna allow, 80% can be paid through your, uh, rewards points. 20% has to be always cash. So those sort of splits, defining those sort of rules, everything is possible. Um, beyond that, some of the framework level stuff, maybe we can discuss later, but the most important thing was like OTA, you have like multi uh, platform compatibility because you're developing once, you're not developing three times, one for Android iOS and developing ones, that single development is able to cater to all your three platforms.
[00:35:01] Maybe like you said, maybe I'll go over the. So this is that page that I was talking about. So this is exposed to merchants as well as like everyone internally also can decide to come here like this is that no-code platform where you can make the changes, you can change the font family, you have a lot of other features also, so you can.
[00:35:26] Like for that payment locking right, that we were discussing, if it was maybe greater than a lack or so greater than a million or so, you don't want, like, if it's greater than a thousand, you don't wanna show cards. You can configure that specific, uh, say blocker using payload. So you can give what is a requirement.
[00:35:41] We'll be generating that payload and giving it back. Product summaries again, like if you wanna show maybe a ticket breakdown or some things like that summary. Everything you can configure from here, you can sort of deploy it directly. It's more like. You don't need a developer to come here. You could have their product analytics guy or a product manager or someone from the business side.
[00:36:01] Anyone can come define. What is there idea is that your engineering bandwidth is not needed at all for this role. You have this tutorial. Also, maybe once you have access to this, uh, dashboard and studio, you could also play around with this. You can create a dummy account and play around with this.
[00:36:23] That like you have any questions because maybe a deeper session probably we can have later also. Maybe that might confuse also, but yeah,
[00:36:35] so any other questions I can sort of take? Okay.

